<!DOCTYPE html>
<html class="dark:bg-gray-900">

<head>
    <title>Login - CallFix</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <!-- Lien vers votre fichier CSS factorisé -->
    <link rel="stylesheet" href="/public/styles/login.css">
    
    <!-- Initialisation du thème -->
    <script>
        // Synchroniser le thème au chargement de la page
        const theme = localStorage.getItem('color-theme');
        if (theme === 'dark' || (!theme && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
            document.documentElement.classList.add('dark');
        } else {
            document.documentElement.classList.remove('dark');
        }
    </script>
</head>

<body class="bg-gray-100 dark:bg-gray-900 min-h-screen texture-bg">
    <!-- Particules d'arrière-plan (visibles en mode sombre) -->
    <div class="particle" style="top: 10%; left: 20%; width: 8px; height: 8px; animation-delay: 0s;"></div>
    <div class="particle" style="top: 30%; left: 70%; width: 6px; height: 6px; animation-delay: 2s;"></div>
    <div class="particle" style="top: 70%; left: 30%; width: 10px; height: 10px; animation-delay: 4s;"></div>
    <div class="particle" style="top: 40%; left: 10%; width: 5px; height: 5px; animation-delay: 6s;"></div>
    <div class="particle" style="top: 80%; left: 80%; width: 7px; height: 7px; animation-delay: 8s;"></div>
    
    <div class="min-h-screen flex items-center justify-center p-4 animate-fade-in">
        <div class="max-w-md w-full">
            <div class="bg-white dark:bg-gray-800 p-8 rounded-lg shadow-md card-container neumorph glow-effect animate-slide-up animate-delay-sm">
                <!-- Circuit pattern en arrière-plan -->
                <div class="circuit-pattern"></div>
                
                <!-- Logo et titre -->
                <div class="text-center mb-8">
                    <h1 class="text-3xl font-bold text-gray-900 dark:text-white logo-text">CallFix</h1>
                    <p class="text-gray-600 dark:text-gray-400 mt-2 animate-delay-md animate-fade-in">
                        Plateforme de gestion de tickets
                    </p>
                </div>
                
                <!-- Formulaire de connexion -->
                <form action="/login" method="POST" class="space-y-4">
                    <div class="animate-delay-md animate-slide-up">
                        <label class="block text-sm font-medium mb-1 text-gray-700 dark:text-gray-300">Votre nom</label>
                        <div class="relative">
                            <input type="text"
                                   name="username"
                                   required
                                   placeholder="Entrez votre nom"
                                   class="w-full p-2 border rounded
                                          text-gray-900 dark:text-white
                                          bg-white dark:bg-gray-700
                                          border-gray-300 dark:border-gray-600
                                          focus:border-blue-500 dark:focus:border-blue-400
                                          focus:ring-1 focus:ring-blue-500 dark:focus:ring-blue-400
                                          placeholder-gray-400 dark:placeholder-gray-500
                                          input-focus-effect"
                                   list="usernames">
                            <datalist id="usernames">
                                <% savedUsers.forEach(user => { %>
                                    <option value="<%= user %>">
                                <% }) %>
                            </datalist>
                        </div>
                    </div>

                    <button type="submit"
                            class="w-full bg-blue-500 text-white px-4 py-2 rounded
                                   hover:bg-blue-600 dark:bg-blue-600 dark:hover:bg-blue-700
                                   focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2
                                   dark:focus:ring-offset-gray-800
                                   btn-3d animate-delay-lg animate-slide-up">
                        Se connecter
                    </button>
                </form>

                <!-- Liens rapides -->
                <div class="mt-8 flex justify-center space-x-6 animate-delay-lg animate-fade-in">
                    <!-- Lien "Voir les statistiques" -->
                    <a href="/stats"
                       class="text-blue-500 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300
                              flex items-center justify-center gap-2 link-hover-effect svg-container">
                        <svg class="w-5 h-5 svg-icon"
                             fill="none"
                             stroke="currentColor"
                             viewBox="0 0 24 24">
                            <path stroke-linecap="round"
                                  stroke-linejoin="round"
                                  stroke-width="2"
                                  d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                        </svg>
                        <span>Voir les statistiques</span>
                    </a>
               
                    <!-- Bouton "Générer un Rapport" -->
                    <a href="/report"
                       class="text-blue-500 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300
                              flex items-center justify-center gap-2 link-hover-effect svg-container">
                        <svg class="w-5 h-5 svg-icon"
                             fill="none"
                             stroke="currentColor"
                             viewBox="0 0 24 24">
                            <path stroke-linecap="round"
                                  stroke-linejoin="round"
                                  stroke-width="2"
                                  d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                        <span>Générer un Rapport</span>
                    </a>
                </div>
                
                <!-- Note de version -->
                <div class="mt-8 text-center text-xs text-gray-500 dark:text-gray-400 animate-delay-lg animate-fade-in">
                    Version 2.5.0 | &copy; 2025 CallFix
                </div>
            </div>
        </div>
    </div>

    <!-- Script du gestionnaire de thème -->
    <script src="/js/themeManager.js"></script>

    <!-- Script d'autocomplétion -->
    <script>
        // Classe d'autocomplétion
        class Autocomplete {
            constructor(input, items) {
                this.input = input;
                this.items = items;
                this.currentFocus = -1;
                this.setup();
            }

            setup() {
                this.list = document.createElement('div');
                this.list.classList.add('autocomplete-list');
                this.input.parentNode.appendChild(this.list);

                this.input.addEventListener('input', () => this.updateList());
                this.input.addEventListener('keydown', (e) => this.handleKeydown(e));
                document.addEventListener('click', (e) => {
                    if (!this.input.contains(e.target)) {
                        this.list.classList.remove('show');
                    }
                });
            }

            updateList() {
                const value = this.input.value.toLowerCase();
                this.currentFocus = -1;
                this.list.innerHTML = '';

                if (!value) {
                    this.list.classList.remove('show');
                    return;
                }

                const matchingItems = this.items.filter(item =>
                    item.toLowerCase().includes(value)
                );

                if (matchingItems.length) {
                    this.list.classList.add('show');
                    matchingItems.forEach((item, index) => {
                        const div = document.createElement('div');
                        div.classList.add('autocomplete-item');
                        
                        // Mettre en évidence la partie correspondante
                        const regex = new RegExp(`(${value})`, 'gi');
                        const highlightedText = item.replace(regex, '<b>$1</b>');
                        div.innerHTML = highlightedText;
                        
                        // Ajouter un délai progressif pour l'animation
                        div.style.animationDelay = `${index * 50}ms`;
                        div.style.opacity = "0";
                        div.style.animation = "slideInUp 0.3s ease-out forwards";
                        
                        div.addEventListener('click', () => {
                            this.input.value = item;
                            this.list.classList.remove('show');
                        });
                        this.list.appendChild(div);
                    });
                }
            }

            handleKeydown(e) {
                const items = this.list.getElementsByTagName('div');
                if (!items.length) return;

                if (e.key === 'ArrowDown') {
                    this.currentFocus++;
                    if (this.currentFocus >= items.length) this.currentFocus = 0;
                    this.setActive(items);
                } else if (e.key === 'ArrowUp') {
                    this.currentFocus--;
                    if (this.currentFocus < 0) this.currentFocus = items.length - 1;
                    this.setActive(items);
                } else if (e.key === 'Enter' && this.currentFocus > -1) {
                    e.preventDefault();
                    items[this.currentFocus].click();
                }
            }

            setActive(items) {
                Array.from(items).forEach(item => item.classList.remove('selected'));
                if (this.currentFocus > -1) {
                    items[this.currentFocus].classList.add('selected');
                    // Assurer que l'élément sélectionné est visible
                    items[this.currentFocus].scrollIntoView({block: 'nearest'});
                }
            }
        }

        // Initialisation au chargement de la page
        window.onload = function() {
            const usernameInput = document.querySelector('input[name="username"]');
            new Autocomplete(usernameInput, <%- JSON.stringify(savedUsers) %>);

            // Redirection admin
            usernameInput.addEventListener('input', function() {
                if (this.value.toLowerCase() === 'admin') {
                    window.location.href = '/admin/create-ticket';
                }
            });
            
            // Création des particules dynamiques (uniquement en mode sombre)
            if (document.documentElement.classList.contains('dark')) {
                createParticles();
            }
        };
        
        // Fonction pour créer des particules dynamiques
        function createParticles() {
            const particleCount = 10;
            const container = document.body;
            
            for (let i = 0; i < particleCount; i++) {
                const particle = document.createElement('div');
                particle.classList.add('particle');
                
                // Positionnement aléatoire
                particle.style.top = `${Math.random() * 100}%`;
                particle.style.left = `${Math.random() * 100}%`;
                particle.style.width = `${Math.random() * 6 + 3}px`;
                particle.style.height = particle.style.width;
                
                // Animation avec délai aléatoire
                particle.style.animationDelay = `${Math.random() * 10}s`;
                
                container.appendChild(particle);
            }
        }
    </script>
</body>
</html>
